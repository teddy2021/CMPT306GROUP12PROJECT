Rules:
    First line: Dimension of production rules. m n for rules which have dimensions m by n
    Second line: "Alphabet". 
        First "letter" is the null placeholder. 
        Second "letter" is the starting placeholder. 
        Third through second last are all the letters with production rules, aside from the start "letter". 
        Last "letter" is the terminal placeholder, and is neccessary as without it infinite loops and other unfortunate situations are possible.
    Third line: the definition of the set of wall letters. Formated as "Walls: $[letters]"
    Fourth line: the definition of the set of ground letters. Formatted as "Ground: $[letters]"
    Fifth onwards: These lines define the production rules. Formatted as "$letter: $[rules]", where each rule is m sets of n groups of two or more letters. Best practice is to use varying numbers of spaces to differentiate between letters and rows in rules. Individual rules are seperated by commas.
For any given production, a random rule is selected from the set of available rules, and then placed into the map without overriding non-null/starter tiles.
So for a fresh map, the production rule of a: aaa bbb ccc is placed so that the map now has aaa bab ccc centered around the original array index of the a. If a tile 
was already there, for example a z up and to the left of the original a, the production rule would result in zaa bab ccc.
In a 2d view of this, the first looks like:
. . .    a a a
. a . -> b a b
. . .    c c c
and the second looks like:
z . .    z a a
. a . -> b a b
. . .    c c c


Generator:
    DisplayCustom: A method to display a given map.
        Preconditions: 
            The generator script must have a rule set, wall and floor objects, and respective tiles.
        Parameters:
            Map: A string[,] which defines the map to be displayed, must conform with the rules given to the generator.
        Post-conditions: 
            The map is rendered in the tilemaps.
        No returns.
    
    Display: A method to display the map most recently generated with the generator.
        Preconditions: 
            The generator script must have a ruleset, wall and floor objects, and respective tiles. 
            Generation must have been done, either at startup, or through regenerate/generate new map.
        No parameters.
        Post-conditions: 
            The map most recently generated by this generator is displayed.
        No returns.

    GetWidth: A method to get the width of the map.
        Preconditions: 
            The width value must be set, prior to runtime.
        No parameters.
        No post-conditions.
        Returns: 
            The width value as an int.
    
    GetHeight: A method to get the height of the map.
        Preconditions: 
            The height value must be set, prior to runtime.
        No parameters.
        No post-conditions.
        Returns: 
            The height value as an int.

    GenerateNewMap: A method to create a new map in place.
        Preconditions: 
            A ruleset has been provided, the wall and floor tilemaps and respective
            tiles have been provided.
        No parameters.
        Post-conditions: 
            The map held by the generator is replaced with a new map.
        No returns.

    Regenerate: A method to recreate (supposing a seed has been provided) or restart creation of a map.
        Preconditions: 
            A rule set has been provided, and a map and floor object with respective tiles have been
            handed in.
        No parameters.
        Post-conditions: 
            The random number generator is reset, either with the same
            or a random seed, and a new map is generated with the new generator replacing the 
            current, now previous, map held by the generator.
        No returns.

    ChangeSeedIndirect: A method to change the seed value for the random number generator.
        Preconditions: 
            The component (input field, named "Seeder") contains the new seed.
        No parameters.
        Post-conditions: 
            The seed for the random generator is changed, effectively (and in 
            reality) replacing the random generator.
        No returns.

    ChangeSeedDirect: A method to directly change the seed of the random generator.
        No Preconditions.
        Parameters: 
            Seed: A string of the new seed.
        Post-conditions: 
            The random generator is changed to use the new seed.
        No returns.

    getStringMap: A method to get the map, as a string[,].
        Preconditions: 
            A map has been generated. 
        No parameters.
        No post-conditions.
        Returns:
            A string[,] format of the map generated by the generator.

Scriptable_Tile:
    This class is the superclass of the tiles used in the map generator script. 
    The only overrides (so far) are to how the index for a new sprite is obtained.

    RefreshTile: A method to update the tile sprite at a given position.
        No Preconditions.
                Parameters:
            location: a 3 vector (Vector3Int) which points to a specific (this) tile's location
            tilemap: an ITilemap which holds the (this) tile.
        Post-conditions: 
            The sprites of this tile and its neighbours are refreshed.
        No returns.

    HasTile: A method to check if a tile exists at a given position.
        No precondtions.
        Parameters:
            tilemap: an ITilemap which holds the (this) tile.
            position: a 3 vector (Vector3Int) which points to a position on a map
            to be querried for a tile.
        No postconditions.
        Returns:
            True if a tile exists at position, false otherwise.

    GetTileData: A method to decide what sprite to display for the tile.
        No preconditions.
        Parameters: 
            position: a 3 vector (Vector3Int) pointing to a tile's position.
            tilemap: an ITilemap which holds the tiles which use these methods.
            tileData: the TileData object for the tile at position.
        Post-conditions: 
            The tile's sprite is changed, it's transformation is locked
            and its collider type is set to sprite.
        No returns.

    GetIndex: A method to find the index of a new sprite in the set of possible sprites.
        Preconditions: 
            The available sprites are in an array for the tile.
        Parameters: 
            Mask: a byte which represents the amount of neighbours a tile has.
        No post-conditions.
        Returns: 
            An int which is the index of the new sprite for the tile.